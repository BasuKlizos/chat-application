networks:
  my-networks:
    driver: bridge

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile # Uses your custom frontend Dockerfile
    container_name: frontend-services
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules # Avoids overwriting `node_modules` from the host
    working_dir: /app
    depends_on:
      - backend
    networks:
      - my-networks
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend-services
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    ulimits:
      nofile:
        soft: 65535
        hard: 65535
    working_dir: /app
    environment:
      - MONGO_URI=mongodb://mongodb:27017
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET_KEY=2b84e3600996cbbc3fb3fe013b3de85f099bcb07
      - ALGORITHM=HS256
    depends_on:
      - mongodb
      - redis
      # - loki
    networks:
      - my-networks
    restart: unless-stopped

  # celery_worker:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: celery_worker
  #   command: celery -A src.app.celery.celery_worker:celery_app worker --loglevel=info
  #   environment:
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #   depends_on:
  #     - backend
  #     - redis
  #   networks:
  #     - my-networks
  #   restart: unless-stopped

  # flower:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: flower
  #   command: celery -A src.app.celery.celery_worker:celery_app flower --port=5555
  #   ports:
  #     - "5555:5555"
  #   environment:
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #   depends_on:
  #     - backend
  #     - redis
  #     - celery_worker
  #   networks:
  #     - my-networks
  #   restart: unless-stopped

  mongodb:
    image: mongo
    container_name: mongodb-chat-container
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - my-networks
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis-chat-container
    ports:
      - "6379:6379"
    networks:
      - my-networks
    restart: unless-stopped

  prometheus:
    image: prom/prometheus
    container_name: prometheus-container
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus # Persistent storage for metrics
      - ./prometheus.yml:/etc/prometheus/prometheus.yml # Config file (bind mount)
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus" # Store database in /prometheus
      - "--storage.tsdb.retention.time=30d" # Keep metrics for 30 days
    networks:
      - my-networks
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    container_name: grafana-container
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
      # - loki
    networks:
      - my-networks
    restart: unless-stopped

  # loki:
  #   image: grafana/loki:latest
  #   container_name: loki-container
  #   ports:
  #     - "3100:3100"
  #   volumes:
  #     - loki_data:/loki  # Use a named volume instead of /var/loki
  #     - ./loki-config.yml:/etc/loki/local-config.yml  # Loki config file
  #   command: -config.file=/etc/loki/local-config.yml
  #   networks:
  #     - my-networks
  #   restart: unless-stopped

# Persistent storage
volumes:
  mongo_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  # loki_data:
  #   driver: local

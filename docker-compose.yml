networks:
  my-networks:
    driver: bridge

services:
  frontend:
    build: ./frontend
    container_name: frontend-services
    ports:
      - "3000:3000"
    volumes:
      - .frontend/:/app
    working_dir: /app
    command: "npm start"
    depends_on:
      - backend
    networks:
      - my-networks
    restart: unless-stopped

  backend:
    build: ./backend
    container_name: backend-services
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    working_dir: /app
    env_file:
      - backend/.env
    depends_on:
      - mongodb
      - redis
    networks:
      - my-networks
    restart: unless-stopped

  mongodb:
    image: mongo
    container_name: mongoDB-conatainer
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - my-networks
    restart: unless-stopped

  redis:
    image: redis
    container_name: redis-container
    ports:
      - "6379:6379"
    networks:
      - my-networks
    restart: unless-stopped

  celery_worker:
    build: ./backend
    container_name: celery_worker
    command:
      sh -c "celery -A src.celery.celery_worker:celery_app worker --loglevel=info &
      celery -A src.celery.celery_worker:celery_app flower --port=5555"
    env_file:
      - backend/.env
    depends_on:
      - backend
      - redis
    networks:
      - my-networks
    restart: unless-stopped

  prometheus:
    image: prom/prometheus
    container_name: prometheus-container
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/etc/prometheus # Persistent storage for metrics
      - ./prometheus.yml:/etc/prometheus/prometheus.yml # Config file (bind mount)
    networks:
      - my_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    container_name: grafana-container
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana # Persistent storage for dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks:
      - my_network
    restart: unless-stopped

# Persistent storage
volumes:
  mongo_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
